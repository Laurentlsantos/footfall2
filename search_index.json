[["visitor-behaviour.html", "3 Visitor Behaviour 3.1 Visit Dwell Time 3.2 Visit Frequency 3.3 Number of indoor locations visited per trip", " 3 Visitor Behaviour In this section we will tackle the metrics associated with the manner visitors behave in their journeys. We will investigate three principal metrics: the dwell time visitors spend in a cluster location, the overall number of visits made by each visitor on your site and the number of indoor locations visited per trip. Similar to the last chapter, we need first to load the libraries to be used in the section and then the training files into R. # install if necessary using &#39;install.packages&#39; library(tidyverse) library(ggplot2) library(plotly) library(dplyr) 3.1 Visit Dwell Time Dwell time measures the length of time a person spends or remains remains in a specific area. For retail, It is an essential metric for analysing shopping experience and increasing customer spending. In general, there is a significant and positive relationship between dwell time and sales. The metric can also provides good insights for urban planners. Analysing dwell time in historic basis provides ways to better understand the impacts of renovated spaces and help redesigning street network and accessibility. Lets begin the exercise uploading the file into R and setting the fields in the corret format # load the data provided with the command read() data_dwell &lt;- read.csv(&quot;C:/data/visit_dwell_time.csv&quot;, header=TRUE, fileEncoding=&quot;UTF-8-BOM&quot;) # define the correct format data_dwell &lt;- data_dwell %&gt;% mutate(month = as.Date(month)) %&gt;% mutate(year = as.character(year)) # re-order the months data_dwell &lt;- data_dwell %&gt;% mutate(mm = fct_relevel(mm, &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;,&quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;)) The first visualisation deals with historical data. As in the previous chapter, we can use plotly() for an interactive visualisation. g9 &lt;- ggplot(data = data_dwell, aes(month, dwell)) + scale_y_continuous(labels = scales::comma)+ geom_line() + geom_point()+ scale_x_date(labels = scales::label_date(&quot;%B\\n%Y&quot;))+ labs(y=&quot;dwell time (mins)&quot;, x=&quot;date&quot;, title = paste(&quot;Average dwell time&quot;)) ggplotly(g9) We can also plot a graph with ggplot2(). g10 &lt;- ggplot(data_dwell, aes(month, dwell)) + geom_point(colour = &quot;darkturquoise&quot; , size = 3, na.rm = TRUE)+ geom_line(na.rm = TRUE, colour = &quot;darkturquoise&quot;, size = 1.3) + annotate( geom = &quot;segment&quot;, x = ymd(&quot;2020-03-23&quot;), y = 105, xend = ymd(&quot;2020-03-23&quot;), yend = 95, arrow = arrow(length = unit(2, &quot;mm&quot;)) ) + annotate(geom = &quot;text&quot;, x = ymd(&quot;2020-03-12&quot;), y = 110, label = &quot;lockdown\\n23 March 2020&quot;, hjust = &quot;left&quot;) + theme_light() g10 + scale_x_date(labels = scales::label_date(&quot;%B\\n%Y&quot;))+ labs(y=&quot;dwell time (mins)&quot;, x=&quot;date&quot;, title = paste(&quot;Average dwell time&quot;), caption = &quot;Source: Visitor Insights&quot;) It could be a good idea to explore seasonality using faceting. With facet_wrap() we can make a ribbon of panels with dwell time by year. Note that we can also make available the dwell time value of each point (or month). g11 &lt;- ggplot(data_dwell, aes(mm, dwell, color = year)) + scale_y_continuous(labels = scales::comma)+ geom_line(aes(group = year), size = 1)+ geom_point(aes(group = year), size = 3)+ scale_fill_manual(&#39;Program Type&#39;)+ facet_wrap(~year,nrow = 2)+ theme_light()+ geom_text(aes(label = round(dwell, 0)), colour = &quot;grey32&quot;, size = 3, vjust = &quot;inward&quot;, hjust = &quot;outward&quot;, show.legend = FALSE) g11 + theme(legend.position = c(1, 0), legend.justification = c(2.6, 0)) + theme(plot.background = element_rect(colour = &quot;grey50&quot;)) + theme(axis.text.x = element_text(angle = -90, vjust = 0.5)) + labs(y=&quot;dwell time (mins)&quot;, x=&quot;date&quot;, title = paste(&quot;Average dwell time&quot;), caption = &quot;Source: Visitor Insights&quot;) Finally, we should calculate the average dwell time by year to understand any change in visitor dwell time. data_dwell_avg &lt;- data_dwell %&gt;% group_by(year) %&gt;% summarize(dwell = mean(dwell)) g12 &lt;- ggplot(data_dwell_avg, aes(x = year, y = dwell)) + geom_col(fill = &quot;cyan4&quot;)+ scale_y_continuous(labels = scales::comma) + theme_light() + geom_text(aes(label = round(dwell, 0)), position = position_dodge(width = 0.9), size = 8, colour = &quot;white&quot;, vjust = 1.5) g12 + theme(plot.background = element_rect(colour = &quot;grey50&quot;)) + theme(axis.text = element_text(size = 12)) + labs(y=&quot;average dwell time (mins)&quot;, x=&quot;year&quot;, caption = &quot;Note: 2021 as for July\\nSource: Visitor Insights&quot;) It can be highlighted from the graph the the average dwell time has been consistently declining since 2018. It is advisable to cross check data to better understand this trend. 3.2 Visit Frequency Visit frequency tells you how many people visit your location repeatedly within a specific time period. VI dataset breaks down the frequency in five periods: annually, half yearly, quarterly, monthly and weekly. In retail, visit frequency reveals consumers behaviour and preferences and is usually related to the level of customers loyalty. The metric can provides good clues to understand the relationships between frequency and characteristics of shoppers such as functional shopping motivation, recreational shopping motivation, age, income and family size. data_frequency &lt;- read.csv(&quot;C:/data/visit_frequency.csv&quot;, header=TRUE, fileEncoding=&quot;UTF-8-BOM&quot;) # then ordering the frequencies data_frequency &lt;- data_frequency %&gt;% mutate(frequency = fct_relevel(frequency, &quot;annually&quot;, &quot;half yearly&quot;, &quot;quarterly&quot;, &quot;monthly&quot;, &quot;weekly&quot;)) g6 &lt;- ggplot(data_frequency, aes(fill= frequency, y= pct, x= year)) + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;, colour = &quot;black&quot;, fill = &quot;darkcyan&quot;) + geom_text(aes(label = scales::percent((pct),.2), y = pct, group = year,), position = position_dodge(width = 0.9), vjust = 1.5, colour=&quot;white&quot;, size = 3) + facet_wrap(~frequency) + theme(legend.position=&quot;none&quot;) + scale_y_continuous(labels=percent) + xlab(&quot;&quot;)+ labs(y=&quot;perc&quot;, x=&quot;&quot;, title=&quot;Visit Frequency&quot;, caption = &quot;Source: Visitor Insight&quot;) g6 + theme_gray() + theme(plot.background = element_rect(colour = &quot;grey50&quot;)) 3.3 Number of indoor locations visited per trip The number of indoor locations visited per trip is an important measure to understnag visitor s journey. data_stores &lt;- read.csv(&quot;C:/Users/Laurent/OneDrive - ROCS/VI/visit_stores_per_trip.csv&quot;, header=TRUE, fileEncoding=&quot;UTF-8-BOM&quot;) data_stores &lt;- data_stores %&gt;% mutate(date = as.Date(date)) %&gt;% mutate(year = as.character(year)) data_stores_summary &lt;- data_stores %&gt;% group_by(year, venues) %&gt;% summarize(pct = mean(pct)) ## `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. g16 &lt;- ggplot(data_stores_summary, aes(x = venues, y = pct)) + geom_col(fill = &quot;royalblue4&quot;)+ scale_y_continuous(labels=percent, limits = c(0, 0.8)) + theme_bw() + facet_wrap(~year) + geom_text(aes(label = scales::percent((pct),0.1), y = pct, group = year,), position = position_dodge(width = 0.9), vjust = -0.4, colour=&quot;royalblue4&quot;, size = 3.5) g16 + labs(y=&quot;perc.(%)&quot;, x=&quot;venues&quot;, title=&quot;Number of indoor locations visited per trip&quot;, caption = &quot;Source: Visitor Insights&quot;) "]]
